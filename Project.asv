function varargout = Project(varargin)
% PROJECT MATLAB code for Project.fig
%      PROJECT, by itself, creates a new PROJECT or raises the existing
%      singleton*.
%
%      H = PROJECT returns the handle to a new PROJECT or the handle to
%      the existing singleton*.
%
%      PROJECT('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in PROJECT.M with the given input arguments.
%
%      PROJECT('Property','Value',...) creates a new PROJECT or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before Project_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to Project_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help Project

% Last Modified by GUIDE v2.5 16-Jul-2020 20:49:08

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @Project_OpeningFcn, ...
                   'gui_OutputFcn',  @Project_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before Project is made visible.
function Project_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to Project (see VARARGIN)

% Choose default command line output for Project
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes Project wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = Project_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;



function edit2_Callback(hObject, eventdata, handles)
% hObject    handle to edit2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit2 as text
%        str2double(get(hObject,'String')) returns contents of edit2 as a double


% --- Executes during object creation, after setting all properties.
function edit2_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

    

% --- Executes on button press in pushbutton2.
function pushbutton2_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
%Plan Path Between Two Random States
set(handles.edit2, 'string', 'Loading...');
%Create a state space.
ss = stateSpaceSE2;
%Create an occupanyMap-based state validator using the created state space.
sv = validatorOccupancyMap(ss);
%Create an occupancy map from loaded file and and set map resolution as 1 cell/meter.
load NewMap.mat
map = binaryOccupancyMap(unnamed,1);
sv.Map = map;
%Set validation distance for the validator.
sv.ValidationDistance = 0.01;
%Update state space bounds to be the same as map limits.
ss.StateBounds = [map.XWorldLimits;map.YWorldLimits; [-pi pi]];
%Create the path planners for  and increase max connection distance.
set(handles.edit2, 'string', 'Loading...');
myPlannerAStar = plannerHybridAStar(sv);
myPlannerAStar.MinTurningRadius = 1.28;

myPlannerRRT = plannerRRT(ss,sv);
myPlannerRRT.MaxConnectionDistance = 0.1;
myPlannerRRT.MaxIterations = 50000;

myPlannerRRTStar = plannerRRTStar(ss, sv);
myPlannerRRTStar.ContinueAfterGoalReached = true;
myPlannerRRTStar.MaxConnectionDistance = 0.1;
myPlannerRRTStar.MaxIterations = 50000;
%Set random start and goal states limited by the size of the map
fprintf('Setting start and goal');

start = [randi(map.XWorldLimits), randi(map.YWorldLimits), 0];
while checkOccupancy(map, [start(1), start(2)]) ~= 0
    start = [randi(map.XWorldLimits), randi(map.YWorldLimits), 0];
end
goal = [randi(map.XWorldLimits), randi(map.YWorldLimits), 0];
while checkOccupancy(map, [goal(1), goal(2)]) ~= 0 || (goal(1) == start(1) && goal(2) == start(2))
    goal = [randi(map.XWorldLimits), randi(map.YWorldLimits), 0];
end

%Plan a path with A, RRT and RRT* algorithms
rng(100,'twister'); % for repeatable result
fprintf('planning A*');
pathAStar = plan(myPlannerAStar,start,goal);
fprintf('planning RRT');
[pthObjRRT,solnInfoRRT] = plan(myPlannerRRT,start,goal);
fprintf('planning RRT*');
[pthObjRRTStar,solnInfoRRTStar] = plan(myPlannerRRTStar,start,goal);
is_path_found = [1 1];
if solnInfoRRT.IsPathFound == 0 %the test for algorithms: if in any case the path hasn't been found, then place "Path not found"
    fprintf("Path not found by RRT!")
    is_path_found(1) = 0;
else
    fprintf('drawing 1st graph');
    subplot(3,1,1);
    show(map)
    hold on
    plot(solnInfoRRT.TreeData(:,1),solnInfoRRT.TreeData(:,2),'.-'); % tree expansion
    plot(pthObjRRT.States(:,1),pthObjRRT.States(:,2),'r+','LineWidth',1) % draw path 
    hold off 
    title('Path planning with RRT algorithm')   
end

%Visualize the results of three algorithms

if solnInfoRRTStar.IsPathFound == 0 %the test for algorithms: if in any case the path hasn't been found, then place "Path not found"
    fprintf("Path not found by RRT*!")
    is_path_found(2) = 0;
else
    fprintf('drawing 2nd graph');
    subplot(3,1,2);
    show(map)
    hold on
    plot(solnInfoRRTStar.TreeData(:,1),solnInfoRRTStar.TreeData(:,2),'.-'); % tree expansion
    plot(pthObjRRTStar.States(:,1),pthObjRRTStar.States(:,2),'m+','LineWidth',1) % draw path
    hold off
    title('Path planning with RRT* algorithm')
end 

fprintf('drawing 3rd graph');
subplot(3,1,3);
show(myPlannerAStar);
title('Path planning with A* algorithm')

if is_path_found == [1 1]
    set(handles.edit2, 'string', 'Complete, all algorithms found paths!');
elseif is_path_found == [1 0]
    set(handles.edit2, 'string', 'Complete, only RRT not found path!');
elseif is_path_found == [0 1]
    set(handles.edit2, 'string', 'Complete, only RRT* not found path!');
else
    set(handles.edit2, 'string', 'Complete, RRT and RRT* not found paths!');
end
set(handles.edit2, 'string', 'Complete! Press start.');